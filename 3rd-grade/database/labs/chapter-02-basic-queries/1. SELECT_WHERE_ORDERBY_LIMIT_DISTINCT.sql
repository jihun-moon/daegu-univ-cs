-- ==================================================
-- SQL 문 정리 및 설명
-- 이 파일은 SELECT, WHERE, DISTINCT, ORDER BY, LIMIT 문을 포함한 SQL 예제입니다.
-- 각 섹션별로 SQL 구문을 설명하는 주석이 포함되어 있습니다.
-- ==================================================

-- [SELECT 문] 원하는 데이터를 선택하는 기본 SQL 구문
-- ==================================================
-- 2주차 SQL 학습: SELECT 사용법 (2025.03.13)
-- 데이터 조회를 위한 기본 SELECT 문법 정리
-- ==================================================

USE 한빛무역; -- 사용할 데이터베이스 선택

-- 1. 테이블의 모든 데이터를 조회 (모든 컬럼 포함)
SELECT * FROM 고객;
-- 예상 결과:
-- +---------+-------------+-----------+--------------+----------+ ...
-- | 고객번호 | 고객회사명  | 담당자명  | 도시         | 마일리지 |
-- +---------+-------------+-----------+--------------+----------+ ...
-- | 1       | 한빛상사    | 김철수    | 서울특별시    | 120000   |
-- | 2       | 무역주식회사| 이영희    | 부산광역시    | 95000    |
-- | ...     | ...         | ...       | ...          | ...      |
-- +---------+-------------+-----------+--------------+----------+ ...

-- 2. 특정 컬럼만 조회
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객;
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | 1       | 김철수   | 서울특별시    | 120000   |
-- | 2       | 이영희   | 부산광역시    | 95000    |
-- | ...     | ...      | ...          | ...      |
-- +---------+-----------+--------------+----------+

-- 3. 컬럼에 별칭 없이 출력
SELECT 고객번호, 담당자명, 마일리지
FROM 고객;
-- 예상 결과:
-- +---------+-----------+----------+
-- | 고객번호 | 담당자명  | 마일리지 |
-- +---------+-----------+----------+
-- | 1       | 김철수   | 120000   |
-- | 2       | 이영희   | 95000    |
-- | ...     | ...      | ...      |
-- +---------+-----------+----------+


-- [WHERE 절] 특정 조건을 만족하는 데이터만 필터링하는 구문
-- ==================================================
-- 2주차 SQL 학습: WHERE 사용법 (2025.03.13)
-- 특정 조건에 맞는 데이터만 조회하는 WHERE 문법 정리
-- ==================================================

USE 한빛무역; -- 사용할 데이터베이스 선택

-- 1. 특정 조건을 만족하는 데이터 조회 (도시가 '서울특별시'인 고객)
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객
WHERE 도시 = '서울특별시';
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | 1       | 김철수   | 서울특별시    | 120000   |
-- | ...     | ...      | 서울특별시    | ...      |
-- +---------+-----------+--------------+----------+

-- 2. 숫자 조건 비교 (마일리지가 100000 초과인 고객)
SELECT 고객번호, 담당자명, 마일리지
FROM 고객
WHERE 마일리지 > 100000;
-- 예상 결과:
-- +---------+-----------+----------+
-- | 고객번호 | 담당자명  | 마일리지 |
-- +---------+-----------+----------+
-- | 1       | 김철수   | 120000   |
-- | ...     | ...      | ...      |
-- +---------+-----------+----------+


-- [ORDER BY 절] 결과를 특정 컬럼을 기준으로 정렬하는 구문
-- ==================================================
-- 2주차 SQL 학습: ORDER BY 사용법 (2025.03.13)
-- 정렬을 수행하는 ORDER BY 문법 정리
-- ==================================================

USE 한빛무역;

-- 1. 기본 오름차순 정렬 (마일리지가 낮은 순 → 높은 순)
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객
ORDER BY 마일리지 ASC;
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | ...     | ...      | ...          | 50000    |
-- | ...     | ...      | ...          | 120000   |
-- +---------+-----------+--------------+----------+

-- 2. 내림차순 정렬 (마일리지가 높은 순 → 낮은 순)
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객
ORDER BY 마일리지 DESC;
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | 1       | 김철수   | 서울특별시    | 120000   |
-- | ...     | ...      | ...          | 50000    |
-- +---------+-----------+--------------+----------+

-- 3. 여러 컬럼으로 정렬 (서울특별시인 고객 중 마일리지 내림차순)
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객
WHERE 도시 = '서울특별시'
ORDER BY 마일리지 DESC;
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | 1       | 김철수   | 서울특별시    | 120000   |
-- | ...     | ...      | 서울특별시    | ...      |
-- +---------+-----------+--------------+----------+

/*
ORDER BY 마일리지 DESC; == ORDER BY 4 DESC;
같은 의미
*/


-- [LIMIT 절] 반환할 행(row)의 개수를 제한하는 구문
-- ==================================================
-- 2주차 SQL 학습: LIMIT 사용법 (2025.03.13)
-- 특정 개수의 행만 조회하는 LIMIT 문법 정리
-- ==================================================

USE 한빛무역; -- 사용할 데이터베이스 선택

-- 1. 3개 행만 조회 (기본 사용법)
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객
LIMIT 3;
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | 1       | 김철수   | 서울특별시    | 120000   |
-- | 2       | 이영희   | 부산광역시    | 95000    |
-- | 3       | 박민수   | 대구광역시    | 80000    |
-- +---------+-----------+--------------+----------+

-- 2. 10행부터 시작하여 3개 행만 조회
SELECT *
FROM 고객
LIMIT 10, 3;  -- 10행부터 시작하여 3개의 고객 정보를 확인
-- 예상 결과: 고객 테이블의 11번째부터 13번째 행 반환

-- 3. 마일리지가 많은 고객부터 상위 3명 조회
SELECT 고객번호, 담당자명, 도시, 마일리지
FROM 고객
ORDER BY 마일리지 DESC
LIMIT 3;
-- 예상 결과:
-- +---------+-----------+--------------+----------+
-- | 고객번호 | 담당자명  | 도시         | 마일리지 |
-- +---------+-----------+--------------+----------+
-- | 1       | 김철수   | 서울특별시    | 120000   |
-- | 4       | 최영수   | 인천광역시    | 115000   |
-- | 5       | 정지훈   | 서울특별시    | 110000   |
-- +---------+-----------+--------------+----------+


-- [DISTINCT 문] 중복을 제거하고 유일한 값만 반환하는 구문
-- ==================================================
-- 2주차 SQL 학습: DISTINCT 사용법 (2025.03.13)
-- 중복된 데이터를 제거하는 DISTINCT 문법 정리
-- ==================================================

USE 한빛무역; -- 사용할 데이터베이스 선택

-- 1. 중복된 도시 제거 후 조회 (중복 없이 도시 목록 출력)
SELECT DISTINCT 도시
FROM 고객;
-- 예상 결과:
-- +--------------+
-- | 도시         |
-- +--------------+
-- | 서울특별시    |
-- | 부산광역시    |
-- | 대구광역시    |
-- | 인천광역시    |
-- | ...          |
-- +--------------+

-- 2. 중복을 제거한 도시 목록을 오름차순 정렬하여 출력
SELECT DISTINCT 도시
FROM 고객
ORDER BY 도시 ASC;
-- 예상 결과: 도시 이름을 한글 사전순(또는 알파벳순)으로 정렬
-- +--------------+
-- | 도시         |
-- +--------------+
-- | 대구광역시    |
-- | 부산광역시    |
-- | 서울특별시    |
-- | 인천광역시    |
-- | ...          |
-- +--------------+

-- 3. DISTINCT와 LIMIT: 중복 제거 후 상위 5개 도시만 출력
SELECT DISTINCT 도시
FROM 고객
LIMIT 5;
-- 예상 결과: 중복 없이 상위 5개의 도시 목록 반환
