-- ==================================================
-- SQL 연산자 정리 및 설명
-- 이 파일은 산술, 비교, 논리, 집합 연산자와 관련된 SQL 문을 포함합니다.
-- 각 섹션별로 SQL 구문을 설명하는 주석이 포함되어 있습니다.
-- ==================================================

-- [산술 연산자] 수학적 연산을 수행하는 연산자 (+, -, *, / 등)
-- --------------------------------------------------
SELECT 
    23 + 5,    -- 결과: 28
    23 - 5,    -- 결과: 18
    23 * 5,    -- 결과: 115
    23 / 5,    -- 결과: 4.6
    23 DIV 5,  -- 결과: 4    (정수 몫)
    23 % 5,    -- 결과: 3    (나머지)
    23 MOD 5;  -- 결과: 3    (나머지)


-- [비교 연산자] 두 값을 비교하여 TRUE 또는 FALSE를 반환하는 연산자
-- --------------------------------------------------
SELECT 
    23 >= 5,   -- 결과: 1 (TRUE)
    23 <= 5,   -- 결과: 0 (FALSE)
    23 > 23,   -- 결과: 0 (FALSE)
    23 < 23,   -- 결과: 0 (FALSE)
    23 = 23,   -- 결과: 1 (TRUE)
    23 != 23,  -- 결과: 0 (FALSE)
    23 <> 23;  -- 결과: 0 (FALSE)


-- [조건에 따른 데이터 조회]
-- --------------------------------------------------
-- 담당자직위가 '대표 이사'가 아닌 고객 반환
SELECT *
FROM 고객
WHERE 담당자직위 <> '대표 이사';

-- 지역이 빈 문자열인 고객 조회
SELECT *
FROM 고객
WHERE 지역 = '';

-- 빈 문자열인 지역 값을 NULL로 변경
UPDATE 고객
SET 지역 = NULL
WHERE 지역 = '';

-- 지역이 NULL인 고객 조회
SELECT *
FROM 고객
WHERE 지역 IS NULL;


-- [논리 연산자] AND, OR, NOT을 사용하여 논리적 조건을 조합하는 연산자
-- --------------------------------------------------
SELECT *
FROM 고객
WHERE 도시 = '부산광역시'
  AND 마일리지 < 1000;
-- 예상 결과: 도시가 '부산광역시'이면서 마일리지가 1000 미만인 고객 반환


-- [집합 연산자] 여러 SELECT 결과를 조합하는 UNION, INTERSECT, EXCEPT 연산자
-- --------------------------------------------------
-- 1. UNION 사용: 중복 제거 후, 고객번호 기준 오름차순 정렬
SELECT 고객번호,
       담당자명,
       마일리지,
       도시
FROM 고객
WHERE 도시 = '부산광역시'
UNION
SELECT 고객번호,
       담당자명,
       마일리지,
       도시
FROM 고객
WHERE 마일리지 < 1000
ORDER BY 1;
-- 예상 결과: '부산광역시' 고객과 마일리지가 1000 미만인 고객 집합(중복 제거)

-- 2. OR 조건으로 동일한 결과를 수행
SELECT 고객번호,
       담당자명,
       마일리지,
       도시
FROM 고객
WHERE 도시 = '부산광역시' OR 마일리지 < 1000
ORDER BY 1;
-- 결과: 위와 동일한 고객 집합 반환


-- [IN, BETWEEN, AND 연산자] 특정 범위 또는 다중 값과 비교하는 연산자
-- --------------------------------------------------
-- OR 연산자를 사용한 다중 값 비교
SELECT 고객번호,
       담당자명,
       담당자직위
FROM 고객
WHERE 담당자직위 = '영업 과장' OR 담당자직위 = '마케팅 과장';

-- IN 연산자를 사용한 다중 값 비교 (위와 동일)
SELECT 고객번호,
       담당자명,
       담당자직위
FROM 고객
WHERE 담당자직위 IN ('영업 과장', '마케팅 과장');

-- AND 조건을 사용한 범위 비교
SELECT 담당자명,
       마일리지
FROM 고객
WHERE 마일리지 >= 100000
  AND 마일리지 <= 200000;
-- 같은 조건은 BETWEEN으로도 표현 가능:
-- WHERE 마일리지 BETWEEN 100000 AND 200000;


-- [IS NULL 연산자] NULL 값을 확인하는 연산자
-- --------------------------------------------------
SELECT *
FROM 고객
WHERE 지역 IS NULL;
-- 예상 결과: 지역 값이 NULL인 고객 반환

-- 빈 문자열을 NULL로 변경한 후 다시 확인 (앞의 UPDATE 문 참고)
UPDATE 고객
SET 지역 = NULL
WHERE 지역 = '';

SELECT *
FROM 고객
WHERE 지역 IS NULL;


-- [LIKE 연산자] 특정 패턴과 일치하는 문자열을 검색하는 연산자
-- --------------------------------------------------
SELECT *
FROM 고객
WHERE 도시 LIKE '%광역시'
  AND (고객번호 LIKE '_C%' OR 고객번호 LIKE '__C%');
-- 예상 결과: 도시가 '광역시'로 끝나고, 고객번호가 
--            (1문자 뒤에 'C'로 시작하거나 2문자 뒤에 'C'로 시작하는) 패턴인 고객 반환