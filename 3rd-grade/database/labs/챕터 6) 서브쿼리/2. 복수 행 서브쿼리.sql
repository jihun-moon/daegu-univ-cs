-- ==================================================
-- SQL 서브쿼리 및 집합 연산자 예제 정리
-- 이 파일은 IN, ANY, ALL, EXISTS 등의 서브쿼리 관련
-- 예제들을 포함하며, 각각의 쿼리 처리 목적과 예상 결과를 주석으로 설명합니다.
-- ==================================================

---------------------------------------------------------
-- [예제 1] IN 연산자를 이용한 주문 건수 조회
-- 설명: 주문 테이블에서 고객번호가 부산광역시에 위치한 고객에 해당하는 주문 건수를 조회합니다.
SELECT COUNT(*) AS 주문건수
FROM 주문
WHERE 고객번호 IN (
    SELECT 고객번호
    FROM 고객
    WHERE 도시 = '부산광역시'
);

/*
[예상 결과 예시]
-----------------------------
| 주문건수                |
-----------------------------
| 120                     |
-----------------------------
(예시: 부산광역시 고객의 주문 건수가 120건인 경우)
*/

---------------------------------------------------------
-- [예제 2] ANY 연산자를 이용한 마일리지 비교
-- 설명: 고객 테이블에서 마일리지가 부산광역시에 위치한 고객 중
--       하나의 마일리지 값보다 큰 고객들의 담당자명, 고객회사명, 마일리지를 조회합니다.
SELECT 담당자명,
       고객회사명,
       마일리지
FROM 고객
WHERE 마일리지 > ANY (
    SELECT 마일리지
    FROM 고객
    WHERE 도시 = '부산광역시'
);

/*
[예상 결과 예시]
-------------------------------------------------------
| 담당자명  | 고객회사명   | 마일리지              |
-------------------------------------------------------
| 김철수    | XYZ Inc      | 10500                 |
| 박민수    | LMN Corp     | 11000                 |
| ...                                               |
-------------------------------------------------------
(예시: 부산광역시 고객 중 하나의 마일리지보다 큰 고객 정보)
*/

---------------------------------------------------------
-- [예제 3] ALL 연산자를 이용한 지역 평균 마일리지 비교
-- 설명: 고객 테이블에서 마일리지가 모든 지역의 평균 마일리지보다 큰 고객의
--       담당자명, 고객회사명, 마일리지를 조회합니다.
SELECT 담당자명,
       고객회사명,
       마일리지
FROM 고객
WHERE 마일리지 > ALL (
    SELECT AVG(마일리지)
    FROM 고객
    GROUP BY 지역
);

/*
[예상 결과 예시]
-------------------------------------------------------
| 담당자명  | 고객회사명   | 마일리지              |
-------------------------------------------------------
| 이순신    | DEF Corp     | 12000                 |
-------------------------------------------------------
(예시: 모든 지역의 평균 마일리지보다 높은 고객 정보)
*/

---------------------------------------------------------
-- [예제 4] EXISTS 연산자를 이용한 주문 보유 고객 조회
-- 설명: 고객 테이블에서 주문 테이블에 해당 고객번호가 존재하는 고객의
--       고객번호와 고객회사명을 조회합니다.
SELECT 고객번호,
       고객회사명
FROM 고객
WHERE EXISTS (
    SELECT *
    FROM 주문
    WHERE 고객번호 = 고객.고객번호
);

/*
[예상 결과 예시]
-------------------------------------------
| 고객번호 | 고객회사명    |
-------------------------------------------
| C001     | ABC Corp      |
| C005     | DEF Corp      |
| ...                            |
-------------------------------------------
(예시: 주문이 존재하는 고객들의 정보)
*/

---------------------------------------------------------
-- [예제 5] IN 연산자를 이용한 주문 보유 고객 조회 (DISTINCT)
-- 설명: 고객 테이블에서 고객번호가 주문 테이블에 존재하는 고객의
--       고객번호와 고객회사명을 조회합니다.
SELECT 고객번호,
       고객회사명
FROM 고객
WHERE 고객번호 IN (
    SELECT DISTINCT 고객번호
    FROM 주문
);

/*
[예상 결과 예시]
-------------------------------------------
| 고객번호 | 고객회사명    |
-------------------------------------------
| C001     | ABC Corp      |
| C005     | DEF Corp      |
| ...                            |
-------------------------------------------
(예시: 주문에 기록이 있는 고객들의 정보)
*/

---------------------------------------------------------
-- [예제 6] INNER JOIN을 이용한 주문 보유 고객 조회 (DISTINCT)
-- 설명: 고객과 주문 테이블을 INNER JOIN하여 주문이 있는 고객들의
--       중복 없는 고객번호와 고객회사명을 조회합니다.
SELECT DISTINCT 고객.고객번호,
                고객회사명
FROM 고객
INNER JOIN 주문
  ON 고객.고객번호 = 주문.고객번호;

/*
[예상 결과 예시]
-------------------------------------------
| 고객번호 | 고객회사명    |
-------------------------------------------
| C001     | ABC Corp      |
| C005     | DEF Corp      |
| ...                            |
-------------------------------------------
(예시: 주문에 해당하는 고객들의 중복 없이 조회된 정보)
*/
